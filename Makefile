# Makefile –¥–ª—è Flask + Jinja2 –ø—Ä–æ–µ–∫—Ç–∞
# ---------------------------------------------------
# Targets:
#   venv           ‚Äî —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
#   install        ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt
#   run            ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å dev-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5006
#   test           ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
#   clean          ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∫—ç—à
#   docker-dev     ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë –≤ Docker (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
#   docker-prod    ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë –≤ Docker (–ø—Ä–æ–¥–∞–∫—à–Ω)
#   docker-stop    ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
#   docker-clean   ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
#   migrate-reset  ‚Äî –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
# ---------------------------------------------------

# ========== [ –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ] ==========
SHELL := /bin/bash
VENV := .venv
PY := $(VENV)/bin/python
PIP := $(VENV)/bin/pip
FLASK := $(VENV)/bin/flask
REQ := requirements.txt
DEFAULT_PORT := 5006
DB_ENV ?= local
PG_DB ?= jinja_app
PG_USER ?= postgres
PG_HOST ?= localhost

.PHONY: all venv install run help test test-unit test-integration clean freeze \
        docker-dev docker-prod docker-stop docker-clean docker-db-clean docker-logs docker-shell docker-db-shell \
        init-db seed-db migrate-init migrate-create migrate migrate-downgrade drop-db-local recreate-db-local migrate-reset kill-port kill-all-ports

# ========== [ HELP ] ==========
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "\n\033[1;34m–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\033[0m"
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-22s\033[0m %s\n", $$1, $$2}'
	@echo "\n\033[1;33m–ü—Ä–∏–º–µ—Ä—ã:\033[0m"
	@echo "  make migrate-reset DB_ENV=local   # –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  make migrate-reset DB_ENV=docker  # –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î –≤ Docker"

# ========== [ VENV & DEPENDENCIES ] ==========
venv: ## –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "‚öôÔ∏è  –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ .venv..."
	@python3 -m venv .venv
	@echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ."

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt..."
	@.venv/bin/pip install --upgrade pip
	@.venv/bin/pip install -r requirements.txt
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."

freeze: ## –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@.venv/bin/pip freeze > requirements.txt
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –≤ requirements.txt"

# ========== [ RUN & DEV ] ==========
run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "üî´ –û—á–∏—â–∞–µ–º –ø–æ—Ä—Ç $(DEFAULT_PORT)..."
	@lsof -ti:$(DEFAULT_PORT) | xargs kill -9 2>/dev/null || true
	@echo "‚úÖ –ü–æ—Ä—Ç $(DEFAULT_PORT) —Å–≤–æ–±–æ–¥–µ–Ω."
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É $(DEFAULT_PORT)..."
	@FLASK_APP=run.py FLASK_ENV=development FLASK_RUN_PORT=$(DEFAULT_PORT) .venv/bin/flask run
# 		@echo "# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
# 	@echo "FLASK_APP=run.py \\"
# 	@echo "        FLASK_ENV=development \\"
# 	@echo "        FLASK_RUN_PORT=$(DEFAULT_PORT) \\"
# 	@echo "        .venv/bin/flask run"
# 	@FLASK_APP=run.py \
# 		FLASK_ENV=development \
# 		FLASK_RUN_PORT=$(DEFAULT_PORT) \
# 		.venv/bin/flask run

setup: install init-db seed-db ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ."

dev: setup run ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞."

# ========== [ TESTS ] ==========
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤..."
	@.venv/bin/python -m pytest tests/ -v
	@echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã."

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
	@.venv/bin/python -m pytest tests/unit/ -v
	@echo "‚úÖ Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã."

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å integration —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤..."
	@.venv/bin/python -m pytest tests/integration/ -v
	@echo "‚úÖ Integration —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã."

# ========== [ CLEAN ] ==========
clean: ## –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Python
	@find . -type d -name "__pycache__" -exec rm -rf {} +
	@find . -type f -name "*.pyc" -delete
	@echo "‚úÖ –ö—ç—à Python –æ—á–∏—â–µ–Ω."

kill-port: ## –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $(DEFAULT_PORT)
	@lsof -ti:$(DEFAULT_PORT) | xargs kill -9 2>/dev/null || echo "–ü–æ—Ä—Ç $(DEFAULT_PORT) —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω"
	@echo "‚úÖ –ü–æ—Ä—Ç $(DEFAULT_PORT) –æ—á–∏—â–µ–Ω."

kill-all-ports: ## –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 5000-5010
	@for port in {5000..5010}; do \
		lsof -ti:$$port | xargs kill -9 2>/dev/null || true; \
	done
	@echo "‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã 5000-5010 –æ—á–∏—â–µ–Ω—ã."

# ========== [ DOCKER BLOCK ] ==========
# --- Docker: –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –ª–æ–≥–∏, shell ---
docker-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë –≤ Docker (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
	@echo "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Docker (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)..."
	@docker-compose up --build -d
	@sleep 10
	@echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:$(DEFAULT_PORT)"
	@echo "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ localhost:5432"
	@echo "üîç –õ–æ–≥–∏: docker-compose logs -f"

docker-prod: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë –≤ Docker (–ø—Ä–æ–¥–∞–∫—à–Ω)
	@echo "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Docker (–ø—Ä–æ–¥–∞–∫—à–Ω)..."
	@FLASK_ENV=production docker-compose -f docker-compose.yml up --build -d
	@echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"

docker-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
	@docker-compose down
	@echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

docker-clean: ## –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ prune!)
	@echo "üßπ –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volume —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞..."
	@docker-compose down -v
	@echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volume –ø—Ä–æ–µ–∫—Ç–∞ —É–¥–∞–ª–µ–Ω—ã"

docker-db-clean: ## –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ volume –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
	@echo "üßπ –£–¥–∞–ª—è–µ–º volume postgres_data..."
	@docker-compose down
	@docker volume rm introductory-jinja_postgres_data || true
	@echo "‚úÖ Volume –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª—ë–Ω"

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@docker-compose logs -f

docker-shell: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@docker-compose exec web bash

docker-db-shell: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@docker-compose exec db psql -U postgres -d jinja_app

# ========== [ DB MANAGEMENT BLOCK ] ==========
# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–∫–∞–ª–∏ –∏ Docker ---
ifeq ($(DB_ENV),docker)
	DB_EXEC = docker-compose exec web flask
else
	DB_EXEC = .venv/bin/flask
endif

init-db: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ($(DB_ENV))..."
	@FLASK_APP=run.py $(DB_EXEC) init-db
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."

seed-db: ## –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "–°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î ($(DB_ENV))..."
	@FLASK_APP=app.core:create_app $(DB_EXEC) seed-db
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."

migrate-init: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Flask-Migrate (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π ($(DB_ENV))..."
	@FLASK_APP=app.core:create_app $(DB_EXEC) db init
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã."

migrate-create: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ($(DB_ENV))..."
	@FLASK_APP=app.core:create_app $(DB_EXEC) db migrate -m "Auto migration"
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞."

migrate: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π ($(DB_ENV))..."
	@FLASK_APP=app.core:create_app $(DB_EXEC) db upgrade
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."

migrate-downgrade: ## –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ ($(DB_ENV))..."
	@FLASK_APP=app.core:create_app $(DB_EXEC) db downgrade prev
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å."

# --- –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã ---
ifeq ($(DB_ENV),local)
drop-db-local: ## [LOCAL] –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL (jinja_app)
	@echo "–£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö $(PG_DB)..."
	@PGPASSWORD=$(POSTGRES_PASSWORD) psql -U $(PG_USER) -h $(PG_HOST) -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$(PG_DB)';" || true
	@PGPASSWORD=$(POSTGRES_PASSWORD) psql -U $(PG_USER) -h $(PG_HOST) -d postgres -c "DROP DATABASE IF EXISTS $(PG_DB);"
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö $(PG_DB) —É–¥–∞–ª–µ–Ω–∞."

recreate-db-local: drop-db-local ## [LOCAL] –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL (jinja_app)
	@echo "–°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö $(PG_DB)..."
	@PGPASSWORD=$(POSTGRES_PASSWORD) psql -U $(PG_USER) -h $(PG_HOST) -d postgres -c "CREATE DATABASE $(PG_DB) OWNER $(PG_USER);"
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö $(PG_DB) —Å–æ–∑–¥–∞–Ω–∞."
endif

# --- –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î ---# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î -> make migrate-reset DB_ENV=docker
migrate-reset: ## –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å: —É–¥–∞–ª–∏—Ç—å –ë–î, –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏, –Ω–∞–∫–∞—Ç–∏—Ç—å —Å–∏–¥—ã (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Docker)
	@echo "üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ($(DB_ENV))..."
ifeq ($(DB_ENV),local)
	$(MAKE) recreate-db-local
endif
ifeq ($(DB_ENV),docker)
	@echo "üßπ –û—á–∏—â–∞–µ–º volume –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Docker..."
	@docker-compose down -v
	@docker-compose up -d db
	@sleep 10
	@echo "‚úÖ Volume –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Docker –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω."
endif
	@FLASK_APP=app.core:create_app $(DB_EXEC) db upgrade
	@FLASK_APP=app.core:create_app $(DB_EXEC) seed-db
	@echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."

# ========== [ END ] ==========

# –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î
init-db-old:
	FLASK_APP=run.py flask init-db
	FLASK_APP=run.py flask seed-db

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞!!!!!!!!!!!!!!!!!!
clean-project: ## –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "üßπ –û—á–∏—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	@python clean_project.py

clean-all: clean clean-project ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫—ç—à + –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
	@echo "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

archive: clean-project ## –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "üì¶ –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
	@PROJECT_NAME=$$(basename $$(pwd)) && \
	ARCHIVE_NAME="$${PROJECT_NAME}_$(shell date +%Y%m%d_%H%M%S).tar.gz" && \
	tar --exclude='.git' --exclude='.venv' --exclude='venv' --exclude='node_modules' \
		--exclude='__pycache__' --exclude='*.pyc' --exclude='.pytest_cache' \
		--exclude='.coverage' --exclude='htmlcov' --exclude='.tox' \
		--exclude='.vscode' --exclude='.idea' --exclude='.DS_Store' \
		--exclude='*.log' --exclude='instance' --exclude='*.db' \
		--exclude='*.sqlite' --exclude='*.sqlite3' \
		-czf "$$ARCHIVE_NAME" . && \
	echo "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $$ARCHIVE_NAME" && \
	echo "üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $$(du -h "$$ARCHIVE_NAME" | cut -f1)"

archive-clean: clean-all archive ## –û—á–∏—Å—Ç–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤

prepare-release: clean-project ## –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∫ —Ä–µ–ª–∏–∑—É
	@echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–µ–ª–∏–∑—É..."
	@echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é"
	@echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
	@echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥: make lint"
	@echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: make test"
	@echo "   3. –°–æ–∑–¥–∞–π—Ç–µ –∞—Ä—Ö–∏–≤: make archive"

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏
	@echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥..."
	@flake8
	@echo "‚úÖ –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω"

format: ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "üé® –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥..."
	@black .
	@isort .
	@echo "‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω"

lint-fix: format ## –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º
	@echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã..."
	@autopep8 --in-place --recursive --aggressive --aggressive .
	@echo "‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
# ---------------------------
